// ============================
// üì± PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
// ============================
let deferredPrompt;
const installPrompt = document.getElementById('install-prompt');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è beforeinstallprompt
window.addEventListener('beforeinstallprompt', (e) => {
  e.preventDefault();
  deferredPrompt = e;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
  if (!window.matchMedia('(display-mode: standalone)').matches) {
    installPrompt.classList.add('show');
  }
});

// –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
installPrompt.addEventListener('click', async () => {
  if (!deferredPrompt) return;
  
  deferredPrompt.prompt();
  const { outcome } = await deferredPrompt.userChoice;
  
  if (outcome === 'accepted') {
    console.log('PWA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  
  deferredPrompt = null;
  installPrompt.classList.remove('show');
});

// –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
window.addEventListener('appinstalled', () => {
  installPrompt.classList.remove('show');
  console.log('PWA —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç—ã
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    // –°–æ–∑–¥–∞–µ–º Service Worker inline –¥–ª—è Claude artifacts
    const swCode = `
      const CACHE_NAME = 'habit-tracker-v1';
      const urlsToCache = [
        '/',
        '/index.html'
      ];

      self.addEventListener('install', (event) => {
        event.waitUntil(
          caches.open(CACHE_NAME)
            .then((cache) => cache.addAll(urlsToCache))
        );
      });

      self.addEventListener('fetch', (event) => {
        event.respondWith(
          caches.match(event.request)
            .then((response) => {
              if (response) {
                return response;
              }
              return fetch(event.request);
            })
        );
      });
    `;
    
    const blob = new Blob([swCode], { type: 'application/javascript' });
    const swUrl = URL.createObjectURL(blob);
    
    navigator.serviceWorker.register(swUrl)
      .then((registration) => {
        console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
      })
      .catch((error) => {
        console.log('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
      });
  });
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å localStorage –¥–ª—è PWA
function saveUserData() {
  try {
    if (typeof Storage !== 'undefined') {
      localStorage.setItem('habit_' + userName, JSON.stringify(userData));
    }
  } catch (e) {
    console.warn('LocalStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e);
  }
}

function loadUsers() {
  select.innerHTML = '';
  
  try {
    if (typeof Storage !== 'undefined') {
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith('habit_')) {
          const name = key.replace('habit_', '');
          const opt = document.createElement('option');
          opt.value = name;
          opt.textContent = name;
          select.appendChild(opt);
        }
      });
    }
  } catch (e) {
    console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ localStorage, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö
  if (select.options.length === 0) {
    const testUsers = ['–ò–≤–∞–Ω', '–ú–∞—Ä–∏—è', '–ê–ª–µ–∫—Å–µ–π'];
    testUsers.forEach(name => {
      const opt = document.createElement('option');
      opt.value = name;
      opt.textContent = name;
      select.appendChild(opt);
    });
  }
}

function loadUserData(name) {
  try {
    if (typeof Storage !== 'undefined') {
      const key = 'habit_' + name;
      const stored = localStorage.getItem(key);
      if (stored) {
        return JSON.parse(stored);
      }
    }
  } catch (e) {
    console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
  }
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
  const testData = {
    '–ò–≤–∞–Ω': {
      name: '–ò–≤–∞–Ω',
      habits: ['–ó–∞—Ä—è–¥–∫–∞', '–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥', '–ú–µ–¥–∏—Ç–∞—Ü–∏—è'],
      data: {}
    },
    '–ú–∞—Ä–∏—è': {
      name: '–ú–∞—Ä–∏—è', 
      habits: ['–ô–æ–≥–∞', '–ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞', '–ü—Ä–æ–≥—É–ª–∫–∞'],
      data: {}
    },
    '–ê–ª–µ–∫—Å–µ–π': {
      name: '–ê–ª–µ–∫—Å–µ–π',
      habits: ['–ë–µ–≥', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'],
      data: {}
    }
  };
  
  return testData[name] || { name, habits: [], data: {} };
}

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', (e) => {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
  if (userData && userName) {
    saveUserData();
  }
});

// ============================
// üì¶ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
// ============================
let isDragging = false;
let dragStartX = 0;
let slideStartOffset = 0;
let lastStep = 0;

const select = document.getElementById('user-select');
const input = document.getElementById('new-user');
const setUserBtn = document.getElementById('set-user');
const title = document.getElementById('username-title');
const addBtn = document.getElementById('add-btn');
const newHabitInput = document.getElementById('new-habit');
let table;

window.addEventListener('DOMContentLoaded', () => {
  table = document.getElementById('habit-table')?.querySelector('tbody');
});

// ============================
// üîÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ
// ============================
let userName = null;
let userData = null;
let allDates = getAllDates();
let slideOffset = 31;

// ============================
// üéØ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Drag and Drop
// ============================
let isRowDragging = false;
let draggedRowIndex = -1;
let dragStartY = 0;
let longPressTimer = null;
let draggedRow = null;
let dropIndicator = null;
let touchStartTime = 0;
let initialTouchY = 0;

// ============================
// üîß –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏
// ============================
function getAllDates() {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const dates = [];

  for (let i = -31; i <= 32; i++) {
    const d = new Date(today);
    d.setDate(today.getDate() + i);
    dates.push({
      label: d.toLocaleDateString('ru-RU', {
        weekday: 'short',
        day: '2-digit',
        month: '2-digit'
      }),
      key: d.toISOString().split('T')[0],
      isToday: d.toDateString() === new Date().toDateString(),
      date: d
    });
  }

  return dates;
}

// ============================
// üìä –§—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// ============================
function getCurrentMonth() {
  const centerDate = allDates[slideOffset];
  if (!centerDate) return null;
  
  const date = centerDate.date;
  return {
    year: date.getFullYear(),
    month: date.getMonth(), // 0-11
    monthName: date.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })
  };
}

function getDaysInMonth(year, month) {
  return new Date(year, month + 1, 0).getDate();
}

function getMonthProgress(habit, year, month) {
  const daysInMonth = getDaysInMonth(year, month);
  let completedDays = 0;
  
  for (let day = 1; day <= daysInMonth; day++) {
    const date = new Date(year, month, day);
    const dateKey = date.toISOString().split('T')[0];
    
    if (userData.data?.[dateKey]?.[habit] === 'done') {
      completedDays++;
    }
  }
  
  return {
    completed: completedDays,
    total: daysInMonth,
    percentage: Math.round((completedDays / daysInMonth) * 100)
  };
}

function updateProgressBars() {
  if (!userData) return;
  
  const currentMonth = getCurrentMonth();
  if (!currentMonth) return;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const progressHeader = document.querySelector('.progress-col');
  if (progressHeader && progressHeader.tagName === 'TH') {
    progressHeader.textContent = `–ü—Ä–æ–≥—Ä–µ—Å—Å (${currentMonth.monthName.split(' ')[0]})`;
  }
}

function generateAvailableMonths() {
  const months = new Set();
  
  if (!userData || !userData.data) return [];
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Object.keys(userData.data).forEach(dateKey => {
    const date = new Date(dateKey);
    const monthKey = `${date.getFullYear()}-${date.getMonth()}`;
    const monthName = date.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' });
    months.add(JSON.stringify({ key: monthKey, name: monthName, year: date.getFullYear(), month: date.getMonth() }));
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
  const today = new Date();
  const currentMonthKey = `${today.getFullYear()}-${today.getMonth()}`;
  const currentMonthName = today.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' });
  months.add(JSON.stringify({ key: currentMonthKey, name: currentMonthName, year: today.getFullYear(), month: today.getMonth() }));
  
  return Array.from(months).map(m => JSON.parse(m)).sort((a, b) => {
    if (a.year !== b.year) return b.year - a.year;
    return b.month - a.month;
  });
}

// ============================
// üéØ –§—É–Ω–∫—Ü–∏–∏ Drag and Drop
// ============================
function createDropIndicator() {
  const indicator = document.createElement('tr');
  indicator.className = 'drop-indicator';
  indicator.innerHTML = `
    <td colspan="6" style="
      height: 4px; 
      padding: 0; 
      background: linear-gradient(90deg, #00ff9c, #00cc7a); 
      border-radius: 2px;
      box-shadow: 0 0 10px #00ff9c;
    "></td>
  `;
  return indicator;
}

function showDropIndicator(beforeRow) {
  hideDropIndicator();
  dropIndicator = createDropIndicator();
  
  if (beforeRow) {
    beforeRow.parentNode.insertBefore(dropIndicator, beforeRow);
  } else {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
    document.querySelector('#habit-table tbody').appendChild(dropIndicator);
  }
}

function hideDropIndicator() {
  if (dropIndicator) {
    dropIndicator.remove();
    dropIndicator = null;
  }
}

function getRowIndexFromY(y) {
  const rows = Array.from(document.querySelectorAll('#habit-table tbody tr:not(.drop-indicator)'));
  
  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    const rect = row.getBoundingClientRect();
    const rowMiddle = rect.top + rect.height / 2;
    
    if (y < rowMiddle) {
      return i;
    }
  }
  
  return rows.length; // –í –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
}

function startRowDrag(rowIndex, touchY) {
  isRowDragging = true;
  draggedRowIndex = rowIndex;
  dragStartY = touchY;
  initialTouchY = touchY;
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É
  const rows = Array.from(document.querySelectorAll('#habit-table tbody tr'));
  draggedRow = rows[rowIndex];
  
  if (draggedRow) {
    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏
    draggedRow.style.opacity = '0.7';
    draggedRow.style.transform = 'scale(1.02)';
    draggedRow.style.boxShadow = '0 5px 20px rgba(0, 255, 156, 0.5)';
    draggedRow.style.zIndex = '1000';
    draggedRow.style.position = 'relative';
    draggedRow.style.backgroundColor = 'rgba(0, 255, 156, 0.1)';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    navigator.vibrate && navigator.vibrate(50); // –í–∏–±—Ä–∞—Ü–∏—è –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
  }
}

function handleRowDrag(touchY) {
  if (!isRowDragging || !draggedRow) return;
  
  const deltaY = touchY - dragStartY;
  
  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–∑—É–∞–ª—å–Ω–æ
  draggedRow.style.transform = `translateY(${deltaY}px) scale(1.02)`;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
  const newIndex = getRowIndexFromY(touchY);
  const rows = Array.from(document.querySelectorAll('#habit-table tbody tr:not(.drop-indicator)'));
  
  if (newIndex >= 0 && newIndex <= rows.length) {
    if (newIndex < rows.length) {
      showDropIndicator(rows[newIndex]);
    } else {
      showDropIndicator(null); // –í –∫–æ–Ω–µ—Ü
    }
  }
}

function endRowDrag() {
  if (!isRowDragging || !draggedRow) {
    isRowDragging = false;
    draggedRowIndex = -1;
    return;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
  const rows = Array.from(document.querySelectorAll('#habit-table tbody tr:not(.drop-indicator)'));
  let newIndex = draggedRowIndex;
  
  if (dropIndicator) {
    const indicatorIndex = Array.from(dropIndicator.parentNode.children).indexOf(dropIndicator);
    newIndex = indicatorIndex;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤–Ω–∏–∑
    if (newIndex > draggedRowIndex) {
      newIndex--;
    }
  }
  
  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –≤ –º–∞—Å—Å–∏–≤–µ
  if (newIndex !== draggedRowIndex && newIndex >= 0 && newIndex < userData.habits.length) {
    const habitToMove = userData.habits[draggedRowIndex];
    userData.habits.splice(draggedRowIndex, 1);
    userData.habits.splice(newIndex, 0, habitToMove);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    saveUserData();
  }
  
  // –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  draggedRow.style.opacity = '';
  draggedRow.style.transform = '';
  draggedRow.style.boxShadow = '';
  draggedRow.style.zIndex = '';
  draggedRow.style.position = '';
  draggedRow.style.backgroundColor = '';
  
  hideDropIndicator();
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  isRowDragging = false;
  draggedRowIndex = -1;
  draggedRow = null;
  
  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
  render();
}

// ============================
// üìã –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
// ============================
function render() {
  if (!userData) return;

  const tbody = document.getElementById('habit-table')?.querySelector('tbody');
  if (!tbody) return;

  const visibleDays = allDates.slice(slideOffset - 1, slideOffset + 2);

  const th1 = document.getElementById('date-th-1');
  const th2 = document.getElementById('date-th-2');
  const th3 = document.getElementById('date-th-3');

  if (th1 && th2 && th3) {
    th1.textContent = visibleDays[0]?.label || '';
    th2.textContent = visibleDays[1]?.label || '';
    th3.textContent = visibleDays[2]?.label || '';
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    [th1, th2, th3].forEach((th, i) => {
      th.classList.toggle('current-day', visibleDays[i]?.isToday || false);
    });
  }

  tbody.innerHTML = '';

  userData.habits.forEach((habit, habitIndex) => {
    const tr = document.createElement('tr');
    tr.dataset.habitIndex = habitIndex;

    // –ö–æ–ª–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    const tdDel = document.createElement('td');
    tdDel.innerHTML = '<span class="delete-habit">üóëÔ∏è</span>';
    tdDel.onclick = (e) => {
      e.stopPropagation();
      userData.habits = userData.habits.filter(h => h !== habit);
      saveUserData();
      render();
    };
    tr.appendChild(tdDel);

    // –ö–æ–ª–æ–Ω–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º
    const tdName = document.createElement('td');
    tdName.className = 'name-col';
    const habitDiv = document.createElement('div');
    habitDiv.className = 'habit-name';
    habitDiv.textContent = habit;
    tdName.appendChild(habitDiv);
    tr.appendChild(tdName);

    // ============================
    // üéØ Drag and Drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏
    // ============================
    let rowTouchStartTime = 0;
    let rowTouchStartY = 0;
    let isRowTouchMove = false;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏ (–∫—Ä–æ–º–µ –∫—Ä—É–∂–∫–æ–≤)
    tr.addEventListener('touchstart', (e) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞ –∫—Ä—É–∂–∫–µ –∏–ª–∏ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
      if (e.target.closest('.circle') || e.target.closest('.delete-habit')) {
        return;
      }
      
      rowTouchStartTime = Date.now();
      rowTouchStartY = e.touches[0].clientY;
      isRowTouchMove = false;
      touchStartTime = rowTouchStartTime;
      initialTouchY = rowTouchStartY;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
      longPressTimer = setTimeout(() => {
        if (!isRowTouchMove && !isDragging && !isRowDragging) {
          startRowDrag(habitIndex, rowTouchStartY);
        }
      }, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞
      
    }, { passive: true });
    
    tr.addEventListener('touchmove', (e) => {
      const deltaY = Math.abs(e.touches[0].clientY - rowTouchStartY);
      
      if (deltaY > 10) {
        isRowTouchMove = true;
        
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
        if (longPressTimer && !isRowDragging) {
          clearTimeout(longPressTimer);
          longPressTimer = null;
        }
      }
      
      // –ï—Å–ª–∏ —É–∂–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
      if (isRowDragging) {
        e.preventDefault();
        handleRowDrag(e.touches[0].clientY);
      }
    }, { passive: false });
    
    tr.addEventListener('touchend', (e) => {
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
      if (longPressTimer) {
        clearTimeout(longPressTimer);
        longPressTimer = null;
      }
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–ª–∏ —Å—Ç—Ä–æ–∫—É, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
      if (isRowDragging) {
        e.preventDefault();
        endRowDrag();
      }
    }, { passive: false });

    // –ö–æ–ª–æ–Ω–∫–∏ —Å –∫—Ä—É–∂–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    allDates.forEach((d, i) => {
      const td = document.createElement('td');
      td.style.display = (i >= slideOffset - 1 && i <= slideOffset + 1) ? '' : 'none';
      
      // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
      if (d.isToday && i >= slideOffset - 1 && i <= slideOffset + 1) {
        td.classList.add('current-day');
      }

      const circleContainer = document.createElement('div');
      circleContainer.className = 'circle-container';
      
      const circle = document.createElement('div');
      circle.className = 'circle';
      circle.dataset.index = i;

      const status = userData.data?.[d.key]?.[habit] || '';
      circle.dataset.status = status;

      // ===== –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–û–ë–´–¢–ò–ô –î–õ–Ø –ö–†–£–ñ–ö–û–í =====
      let circleTouchStartTime = 0;
      let isCircleTouchMove = false;
      let circleTouchStartPos = { x: 0, y: 0 };
      
      // –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      function changeStatus() {
        const currentStatus = circle.dataset.status || '';
        const next = { '': 'done', 'done': 'fail', 'fail': '' }[currentStatus] || '';
        circle.dataset.status = next;

        if (!userData.data[d.key]) userData.data[d.key] = {};
        if (next === '') delete userData.data[d.key][habit];
        else userData.data[d.key][habit] = next;

        saveUserData();
        render();
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      circle.addEventListener('touchstart', (e) => {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ
        
        circleTouchStartTime = Date.now();
        isCircleTouchMove = false;
        circleTouchStartPos.x = e.touches[0].clientX;
        circleTouchStartPos.y = e.touches[0].clientY;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–∞–π–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è
        setTimeout(() => {
          if (!isCircleTouchMove && (Date.now() - circleTouchStartTime) > 150 && !isRowDragging) {
            isDragging = true;
            dragStartX = circleTouchStartPos.x;
            slideStartOffset = slideOffset;
            lastStep = 0;
          }
        }, 150);
      }, { passive: true });

      circle.addEventListener('touchmove', (e) => {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ
        
        const currentTime = Date.now();
        const deltaTime = currentTime - circleTouchStartTime;
        const deltaX = Math.abs(e.touches[0].clientX - circleTouchStartPos.x);
        const deltaY = Math.abs(e.touches[0].clientY - circleTouchStartPos.y);
        
        // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if (deltaX > 10 || deltaY > 10 || deltaTime > 150) {
          isCircleTouchMove = true;
          
          // –ï—Å–ª–∏ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, —Ç–æ —Å–≤–∞–π–ø
          if (deltaX > deltaY && deltaX > 20 && !isRowDragging) {
            e.preventDefault();
            isDragging = true;
            
            const swipeX = e.touches[0].clientX - circleTouchStartPos.x;
            const stepSize = 60;
            const step = Math.round(swipeX / stepSize);

            if (step !== lastStep) {
              let newOffset = slideStartOffset - step;
              newOffset = Math.max(1, Math.min(allDates.length - 2, newOffset));
              slideOffset = newOffset;
              lastStep = step;
              render();
            }
          }
        }
      }, { passive: false });

      circle.addEventListener('touchend', (e) => {
        e.preventDefault();
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ
        
        const touchEndTime = Date.now();
        const touchDuration = touchEndTime - circleTouchStartTime;
        
        isDragging = false;
        
        // –ï—Å–ª–∏ –∫–∞—Å–∞–Ω–∏–µ –±—ã–ª–æ –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è - —ç—Ç–æ –∫–ª–∏–∫
        if (touchDuration < 300 && !isCircleTouchMove && !isRowDragging) {
          changeStatus();
        }
      }, { passive: false });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
      circle.addEventListener('mousedown', (e) => {
        // –¢–æ–ª—å–∫–æ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        if ('ontouchstart' in window) return;
        
        e.preventDefault();
        e.stopPropagation();
        isDragging = true;
        dragStartX = e.clientX;
        slideStartOffset = slideOffset;
        lastStep = 0;
      });
      
      // –ö–ª–∏–∫ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
      circle.addEventListener('click', (e) => {
        // –¢–æ–ª—å–∫–æ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        if ('ontouchstart' in window) return;
        
        e.stopPropagation();
        changeStatus();
      });

      circleContainer.appendChild(circle);
      td.appendChild(circleContainer);
      tr.appendChild(td);
    });

    // –ö–æ–ª–æ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const currentMonth = getCurrentMonth();
    const tdBar = document.createElement('td');
    tdBar.className = 'progress-col';
    
    if (currentMonth) {
      const progress = getMonthProgress(habit, currentMonth.year, currentMonth.month);
      
      const progressBar = document.createElement('div');
      progressBar.className = 'progress-bar';
      const fill = document.createElement('div');
      fill.className = 'progress-fill';
      fill.style.width = `${progress.percentage}%`;

      const progressText = document.createElement('div');
      progressText.className = 'progress-text';
      progressText.textContent = `${progress.completed}/${progress.total}`;

      progressBar.appendChild(fill);
      tdBar.appendChild(progressBar);
      tdBar.appendChild(progressText);
    }
    
    tr.appendChild(tdBar);
    tbody.appendChild(tr);
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  updateProgressBars();
}

// ============================
// üéÆ Drag-—Å–≤–∞–π–ø –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
// ============================
function handleDrag(clientX) {
  if (!isDragging) return;
  const delta = clientX - dragStartX;
  const stepSize = 60;
  const step = Math.round(delta / stepSize);

  if (step !== lastStep) {
    let newOffset = slideStartOffset - step;
    newOffset = Math.max(1, Math.min(allDates.length - 2, newOffset));
    slideOffset = newOffset;
    lastStep = step;
    render();
  }
}

// –¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
document.addEventListener('mousemove', (e) => {
  if ('ontouchstart' in window) return;
  handleDrag(e.clientX);
});

document.addEventListener('mouseup', () => {
  if ('ontouchstart' in window) return;
  isDragging = false;
});

// ============================
// ‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
// ============================
function setUser(name) {
  userName = name;
  userData = loadUserData(name);
  title.textContent = `–ü—Ä–∏–≤—ã—á–∫–∏: ${name}`;
  saveUserData();
  render();
  addBtn.disabled = false;
  newHabitInput.disabled = false;
}

// ============================
// üéØ –°–ª—É—à–∞—Ç–µ–ª–∏
// ============================
setUserBtn.onclick = () => {
  const name = input.value.trim();
  if (!name) return alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ select
  const opt = document.createElement('option');
  opt.value = name;
  opt.textContent = name;
  select.appendChild(opt);
  
  select.value = name;
  setUser(name);
  input.value = '';
};

addBtn.onclick = () => {
  const habit = newHabitInput.value.trim();
  if (habit && userData && !userData.habits.includes(habit)) {
    userData.habits.push(habit);
    saveUserData();
    newHabitInput.value = '';
    render();
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
newHabitInput.addEventListener('keypress', (e) => {
  if (e.key === 'Enter') {
    addBtn.click();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
input.addEventListener('keypress', (e) => {
  if (e.key === 'Enter') {
    setUserBtn.click();
  }
});

select.addEventListener('change', () => {
  const selectedName = select.value;
  if (selectedName) {
    setUser(selectedName);
  }
});

// üè† –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–µ–≥–æ–¥–Ω—è
const todayBtn = document.getElementById('today-btn');
todayBtn.onclick = () => {
  // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
  const todayIndex = allDates.findIndex(d => d.isToday);
  if (todayIndex !== -1) {
    slideOffset = todayIndex;
    render();
  }
};

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const statsBtn = document.getElementById('stats-btn');
const statsPanel = document.getElementById('stats-panel');
const monthSelect = document.getElementById('month-select');
const statsContent = document.getElementById('stats-content');

statsBtn.onclick = () => {
  statsPanel.classList.toggle('hidden');
  if (!statsPanel.classList.contains('hidden')) {
    loadMonthOptions();
  }
};

function loadMonthOptions() {
  if (!userData) return;
  
  monthSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü</option>';
  const availableMonths = generateAvailableMonths();
  
  availableMonths.forEach(month => {
    const option = document.createElement('option');
    option.value = month.key;
    option.textContent = month.name;
    monthSelect.appendChild(option);
  });
}

monthSelect.addEventListener('change', () => {
  const selectedMonth = monthSelect.value;
  if (!selectedMonth || !userData) {
    statsContent.innerHTML = '<p>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>';
    return;
  }
  
  const [year, month] = selectedMonth.split('-').map(Number);
  showMonthStats(year, month);
});

function showMonthStats(year, month) {
  const monthName = new Date(year, month).toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' });
  
  let html = `<h4>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${monthName}</h4>`;
  
  if (userData.habits.length === 0) {
    html += '<p>–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>';
  } else {
    userData.habits.forEach(habit => {
      const progress = getMonthProgress(habit, year, month);
      
      html += `
        <div class="habit-stats">
          <div class="habit-stats-header">${habit}</div>
          <div class="habit-stats-progress">
            <div class="habit-stats-bar">
              <div class="habit-stats-fill" style="width: ${progress.percentage}%"></div>
            </div>
            <div class="habit-stats-text">${progress.completed}/${progress.total} (${progress.percentage}%)</div>
          </div>
        </div>
      `;
    });
  }
  
  statsContent.innerHTML = html;
}

// –ú–æ–¥–∞–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const deleteUserBtn = document.getElementById('delete-user');
const confirmModal = document.getElementById('confirm-modal');
const confirmText = document.getElementById('confirm-text');
const confirmYes = document.getElementById('confirm-yes');
const confirmNo = document.getElementById('confirm-no');

deleteUserBtn.onclick = () => {
  if (!userName) return;
  confirmText.textContent = `–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ "${userName}"?`;
  confirmModal.classList.remove('hidden');

  confirmYes.onclick = () => {
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
    try {
      if (typeof Storage !== 'undefined') {
        localStorage.removeItem('habit_' + userName);
      }
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
    }
    
    confirmModal.classList.add('hidden');
    loadUsers();
    
    if (select.options.length > 0) {
      const first = select.options[0].value;
      setUser(first);
      select.value = first;
    } else {
      userName = null;
      userData = null;
      title.textContent = '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω';
      render();
      addBtn.disabled = true;
      newHabitInput.disabled = true;
    }
  };

  confirmNo.onclick = () => {
    confirmModal.classList.add('hidden');
  };
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –Ω–µ—ë
confirmModal.onclick = (e) => {
  if (e.target === confirmModal) {
    confirmModal.classList.add('hidden');
  }
};

// ============================
// üöÄ –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// ============================
window.onload = () => {
  loadUsers();
  setTimeout(() => {
    if (select.options.length > 0) {
      const firstUser = select.options[0].value;
      setUser(firstUser);
      select.value = firstUser;
    } else {
      userName = null;
      userData = null;
      title.textContent = '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω';
      addBtn.disabled = true;
      newHabitInput.disabled = true;
      render();
    }
  }, 50);
};

// –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –Ω–∞ iOS
document.addEventListener('touchstart', function(event) {
  if (event.touches.length > 1) {
    event.preventDefault();
  }
}, { passive: false });

let lastTouchEnd = 0;
document.addEventListener('touchend', function(event) {
  const now = (new Date()).getTime();
  if (now - lastTouchEnd <= 300) {
    event.preventDefault();
  }
  lastTouchEnd = now;
}, { passive: false })
