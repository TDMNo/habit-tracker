// app.js
// üìå –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–≤–∞ —ç–∫—Ä–∞–Ω–∞: –≤—ã–±–æ—Ä –∏ —Ç—Ä–µ–∫–µ—Ä

// ==============================
// üîß DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
// ==============================

// üîπ –≠–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞
const entryScreen = document.getElementById('entry-screen');
const select = document.getElementById('user-select');
const input = document.getElementById('new-user');
const button = document.getElementById('create-user');

// üîπ –≠–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–∞ —Ç—Ä–µ–∫–µ—Ä–∞
const trackerScreen = document.getElementById('tracker-screen');
const usernameTitle = document.getElementById('username');
const table = document.getElementById('habit-table')?.querySelector('tbody');
const dayHeaders = [
  document.getElementById('day1'),
  document.getElementById('day2'),
  document.getElementById('day3')
];
const rangeInput = document.getElementById('day-range');
const addBtn = document.getElementById('add-btn');
const newHabitInput = document.getElementById('new-habit');

// ==============================
// üîÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// ==============================

let userData = null;
let userName = null;
let offset = 0;

// ==============================
// üë§ –†–∞–±–æ—Ç–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
// ==============================

/**
 * üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ localStorage
 */
function loadUsers() {
  select.innerHTML = '';
  Object.keys(localStorage).forEach(key => {
    if (key.startsWith('habit_')) {
      const name = key.replace('habit_', '');
      const option = document.createElement('option');
      option.value = name;
      option.textContent = name;
      select.appendChild(option);
    }
  });
}

/**
 * üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ localStorage
 */
function loadUserData(name) {
  const key = 'habit_' + name;
  const data = JSON.parse(localStorage.getItem(key)) || { name, habits: [], data: {} };
  return data;
}

/**
 * üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
 */
function saveUserData() {
  const key = 'habit_' + userName;
  localStorage.setItem(key, JSON.stringify(userData));
}

// ==============================
// üìÖ –î–∞—Ç—ã
// ==============================

function getNDates(centerOffset = 0, range = 1) {
  const base = new Date();
  base.setDate(base.getDate() + centerOffset);
  return Array.from({ length: range * 2 + 1 }, (_, i) => {
    const d = new Date(base);
    d.setDate(d.getDate() + i - range);
    return {
      label: d.toLocaleDateString('ru-RU', { weekday: 'short', day: '2-digit', month: '2-digit' }),
      key: d.toISOString().split('T')[0],
      isToday: d.toDateString() === new Date().toDateString()
    };
  });
}

// ==============================
// üìã –†–µ–Ω–¥–µ—Ä —Ç—Ä–µ–∫–µ—Ä–∞
// ==============================

function renderTracker() {
  const visibleDays = getNDates(offset, 1);
  const progressDays = getNDates(offset, 3);

  // üîÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∞—Ç
  visibleDays.forEach((d, i) => {
    const th = dayHeaders[i];
    th.textContent = d.label;
    th.classList.toggle('current-day', d.isToday);
  });

  // üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
  table.innerHTML = '';

  userData.habits.forEach(habit => {
    const tr = document.createElement('tr');

    // üóë –£–¥–∞–ª–µ–Ω–∏–µ
    const tdDel = document.createElement('td');
    tdDel.className = 'delete-col';
    tdDel.innerHTML = 'üóëÔ∏è';
    tdDel.onclick = () => {
      userData.habits = userData.habits.filter(h => h !== habit);
      saveUserData();
      renderTracker();
    };
    tr.appendChild(tdDel);

    // üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ
    const tdName = document.createElement('td');
    tdName.className = 'name-col';
    tdName.textContent = habit;
    tr.appendChild(tdName);

    // üîò –ö—Ä—É–≥–∏ –ø–æ –¥–Ω—è–º
    visibleDays.forEach(d => {
      const td = document.createElement('td');
      td.className = 'circle';
      const status = userData.data?.[d.key]?.[habit] || '';
      td.dataset.status = status;

      td.onclick = () => {
        const next = { '': 'done', 'done': 'fail', 'fail': '' }[td.dataset.status];
        td.dataset.status = next;

        if (!userData.data[d.key]) userData.data[d.key] = {};
        if (next === '') delete userData.data[d.key][habit];
        else userData.data[d.key][habit] = next;

        saveUserData();
        renderTracker();
      };

      tr.appendChild(td);
    });

    // üìä –ü—Ä–æ–≥—Ä–µ—Å—Å
    const tdBar = document.createElement('td');
    tdBar.className = 'progress-bar';
    const fill = document.createElement('div');
    fill.className = 'progress-fill';

    const completed = progressDays.filter(d => userData.data?.[d.key]?.[habit] === 'done').length;
    fill.style.width = `${(completed / progressDays.length) * 100}%`;

    tdBar.appendChild(fill);
    tr.appendChild(tdBar);
    table.appendChild(tr);
  });
}

// ==============================
// üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
// ==============================

function initTracker(name) {
  userName = name;
  userData = loadUserData(name);

  usernameTitle.textContent = `–ü—Ä–∏–≤—ã—á–∫–∏: ${name}`;
  entryScreen.style.display = 'none';
  trackerScreen.style.display = 'block';
  renderTracker();
}

// ==============================
// üîÅ –°–ª—É—à–∞—Ç–µ–ª–∏
// ==============================

// üìå –°–º–µ—â–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º
rangeInput?.addEventListener('input', () => {
  offset = parseInt(rangeInput.value);
  renderTracker();
});

// ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
addBtn?.addEventListener('click', () => {
  const habit = newHabitInput.value.trim();
  if (habit && !userData.habits.includes(habit)) {
    userData.habits.push(habit);
    saveUserData();
    newHabitInput.value = '';
    renderTracker();
  }
});

// üöÄ –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏"
button?.addEventListener('click', () => {
  const name = input.value.trim() || select.value;
  if (!name) return alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');

  const key = 'habit_' + name;
  if (!localStorage.getItem(key)) {
    localStorage.setItem(key, JSON.stringify({ name, habits: [], data: {} }));
  }

  initTracker(name);
});

// ==============================
// ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç
// ==============================

loadUsers();
